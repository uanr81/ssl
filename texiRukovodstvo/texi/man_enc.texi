ENC(1)                              OpenSSL                             ENC(1)

NAME
       openssl-enc, enc - симметричные процедуры шифрования

SYNOPSIS
       openssl enc -cipher [-help] [-ciphers] [-in filename] [-out filename]
       [-pass arg] [-e] [-d] [-a] [-base64] [-A] [-k password] [-kfile
       filename] [-K key] [-iv IV] [-S salt] [-salt] [-nosalt] [-z] [-md
       digest] [-iter count] [-pbkdf2] [-p] [-P] [-bufsize number] [-nopad]
       [-debug] [-none] [-rand file...]  [-writerand file] [-engine id]

       openssl [cipher] [...]

DESCRIPTION
       Команды симметричного шифра позволяют шифровать или дешифровать данные с
       использованием различных блочных и потоковых шифров с использованием ключей
       на основе паролей или предоставленных явно. Кодирование или декодирование Base64
       также может выполняться либо само по себе, либо в дополнение к шифрованию или
       дешифрованию.
       

OPTIONS
       -help
           Распечатайте сообщение об использовании.

       -ciphers
           Список всех поддерживаемых шифров.

       -in filename
           Ввод имени файла, стандартный ввод по умолчанию.

       -out filename
           Выходное имя файла, стандартный вывод по умолчанию.

       -pass arg
           Источник пароля. Для получения дополнительной информации о формате arg
           смотрите раздел PASS PHRASE ARGUMENTS в openssl(1).

       -e
           Шифровать входные данные: это по умолчанию.

       -d
           Расшифруйте входные данные.

       -a
           Base64 обрабатывает данные. Это означает, что если происходит шифрование,
           данные кодируются в base64 после шифрования. Если дешифрование установлено,
           то входные данные перед декодированием декодируются с помощью base64.

       -base64
           Такой же как -a

       -A
           Если опция -a установлена, то base64 обрабатывает данные в одну строку.

       -k password
           Пароль для получения ключа. Это для совместимости с предыдущими версиями
           OpenSSL. Заменено аргументом -pass.

       -kfile filename
           Прочтите пароль, чтобы получить ключ из первой строки имени файла. Это для
           совместимости с предыдущими версиями OpenSSL. Заменено аргументом -pass.

       -md digest
           Используйте указанный дайджест, чтобы создать ключ из ключевой фразы.
           Алгоритм по умолчанию - sha-256.

       -iter count
           Используйте определенное количество итераций для пароля при получении
           ключа шифрования. Высокие значения увеличивают время, необходимое для
           перебора полученного файла. Эта опция позволяет использовать алгоритм
           PBKDF2 для получения ключа.

       -pbkdf2
           Используйте алгоритм PBKDF2 с количеством итераций по умолчанию, если
           не указано иное.

       -nosalt
           Не используйте соль в процедурах получения ключей. Эта опция SHOULD NOT
           должна использоваться за исключением целей тестирования или совместимости
           с древними версиями OpenSSL.

       -salt
           Использовать соль (генерируется случайным образом или предоставлять опцию -S)
           при шифровании, это значение по умолчанию.

       -S salt
           Фактическая соль для использования: она должна быть представлена ​​в виде
           строки шестнадцатеричных цифр.

       -K key
           Фактический ключ для использования: он должен быть представлен в виде
           строки, состоящей только из шестнадцатеричных цифр. Если указан только ключ,
           IV должен быть дополнительно указан с использованием опции -iv. Если указан
           ключ и пароль, будет использоваться ключ, заданный параметром -K, и будет
           использован IV, сгенерированный из пароля. Не имеет смысла указывать и
           ключ, и пароль.

       -iv IV
           Фактический IV для использования: это должно быть представлено в виде строки,
           состоящей только из шестнадцатеричных цифр. Когда только ключ указан с помощью
           опции -K, IV должен быть явно определен. Когда пароль указывается с
           использованием одной из других опций, из этого пароля генерируется IV.

       -p
           Распечатайте ключ и используйте IV.

       -P
           Распечатайте ключ и используемый IV, а затем немедленно выйдите: не делайте
           шифрование или дешифрование.

       -bufsize number
           Установите размер буфера для I/O.

       -nopad
           Отключить заполнение стандартного блока.

       -debug
           Отладьте BIOs, используемый для I/O.

       -z
           Сжатие или распаковка открытого текста с помощью zlib перед шифрованием
           или после дешифрования. Эта опция существует, только если OpenSSL
           скомпилирован с опцией zlib или zlib-dynamic.

       -none
           Используйте шифр NULL (без шифрования или дешифрования ввода).

       -rand file...
           Файл или файлы, содержащие случайные данные, используемые для заполнения
           генератора случайных чисел. Можно указать несколько файлов, разделенных
           символом, зависящим от ОС. Разделителем является ';' для MS-Windows,
           ',' для OpenVMS и ':' для всех остальных.

       [-writerand file]
           Записывает случайные данные в указанный файл при выходе. Это может быть
           использовано с последующим флагом -rand.

NOTES
       Программа может быть вызвана как openssl cipher или openssl enc -cipher. Первая
       форма не работает с предоставленными движком шифрами, потому что эта форма
       обрабатывается до чтения файла конфигурации и загрузки любого ENGINEs. Используйте
       команду list, чтобы получить список поддерживаемых шифров.

       Модули, которые предоставляют совершенно новые алгоритмы шифрования (например,
       механизм ccgost, который обеспечивает алгоритм gost89), должны быть настроены
       в файле конфигурации. Модули, указанные в командной строке с использованием
       параметров -engine, могут использоваться только для аппаратных реализаций
       шифров, которые поддерживаются ядром OpenSSL или другим механизмом, указанным
       в файле конфигурации.

       Когда команда enc перечисляет поддерживаемые шифры, перечисляются также шифры,
       предоставляемые ядрами, указанными в файлах конфигурации.

       Будет запрошен пароль для получения ключа и IV при необходимости.

       Параметр -salt следует использовать ALWAYS, если ключ извлекается из пароля,
       если вы не хотите совместимости с предыдущими версиями OpenSSL.

       Без опции -salt можно выполнять эффективные атаки по словарю на пароль и
       атаковать зашифрованные данные потокового шифра. Причина этого в том, что без
       соли один и тот же пароль всегда генерирует один и тот же ключ шифрования. Когда
       соль используется, первые восемь байтов зашифрованных данных зарезервированы для
       соли: она генерируется случайным образом при шифровании файла и считывается из
       зашифрованного файла при его дешифровании.

       Некоторые из шифров не имеют больших ключей, а другие имеют последствия для
       безопасности, если не используются правильно. Новичку рекомендуется просто
       использовать надежный блочный шифр, такой как AES, в режиме CBC.

       Все блочные шифры обычно используют заполнение PKCS#5, также известное как
       стандартное заполнение блоков. Это позволяет выполнить элементарную проверку
       целостности или пароля. Однако, поскольку вероятность случайного прохождения
       данных выше 1 на 256, это не очень хороший тест.

       Если заполнение отключено, то входные данные должны быть кратны длине
       блока шифра.

       All RC2 шифры имеют одинаковый ключ и эффективную длину ключа.

       Алгоритмы Blowfish и RC5 используют 128-битный ключ.

SUPPORTED CIPHERS
       Обратите внимание, что некоторые из этих шифров могут быть отключены во
       время компиляции, а некоторые доступны только в том случае, если в файле
       конфигурации настроен соответствующий механизм. Выходные данные команды enc,
       выполняемой с опцией -ciphers (то есть openssl enc -ciphers), создают список
       шифров, поддерживаемых вашей версией OpenSSL, включая те, которые предоставляются
       настроенными движками.

       Программа enc не поддерживает аутентифицированные режимы шифрования, такие как
       CCM и GCM, и не будет поддерживать такие режимы в будущем. Интерфейс enc по
       необходимости должен начинать потоковый вывод (например, на стандартный вывод,
       когда -out не используется), прежде чем тег аутентификации может быть проверен,
       что приводит к использованию enc в конвейерах, которые начинают обрабатывать
       ненадежные данные и не способны откатываться на ошибка аутентификации. Режимы
       AEAD, которые в настоящее время широко используются, также страдают от
       катастрофического нарушения конфиденциальности и/или целостности при повторном
       использовании key/iv/nonce, и, поскольку enc накладывает всю нагрузку на
       управление key/iv/nonce на пользователя, риск использования режимов AEAD слишком
       велик, чтобы допускать его. Эти проблемы управления key/iv/nonce также влияют
       на другие режимы, доступные в настоящее время в enc, но режимы сбоев в этих
       случаях менее экстремальны, и функциональность нельзя удалить с помощью стабильной
       ветки выпуска. Для массового шифрования данных, будь то использование
       аутентифицированных режимов шифрования или других режимов, рекомендуется
       использовать cms(1), поскольку он обеспечивает стандартный формат данных и
       выполняет необходимое управление key/iv/nonce.

        base64             Base 64

        bf-cbc             Blowfish в режиме CBC
        bf                 Псевдоним для bf-cbc
        blowfish           Псевдоним для bf-cbc
        bf-cfb             Blowfish в режиме CFB
        bf-ecb             Blowfish в режиме ECB
        bf-ofb             Blowfish в режиме OFB

        cast-cbc           CAST в режиме CBC
        cast               Псевдоним для cast-cbc
        cast5-cbc          CAST5 в режиме CBC
        cast5-cfb          CAST5 в режиме CFB
        cast5-ecb          CAST5 в режиме ECB
        cast5-ofb          CAST5 в режиме OFB

        chacha20           Алгоритм ChaCha20

        des-cbc            DES в режиме CBC
        des                Псевдоним для des-cbc
        des-cfb            DES в режиме CFB
        des-ofb            DES в режиме OFB
        des-ecb            DES в режиме ECB

        des-ede-cbc        Два ключевых тройных DES EDE в режиме CBC
        des-ede            Два ключа тройной DES EDE в режиме ECB
        des-ede-cfb        Два ключевых тройных DES EDE в режиме CFB
        des-ede-ofb        Два ключевых тройных DES EDE в режиме OFB

        des-ede3-cbc       Три ключа тройной DES EDE в режиме CBC
        des-ede3           Три ключа тройной DES EDE в режиме ECB
        des3               Псевдоним для des-ede3-cbc
        des-ede3-cfb       Трехключевой режим DES EDE CFB
        des-ede3-ofb       Три ключа тройной DES EDE в режиме OFB

        desx               Алгоритм DESX.

        gost89             ГОСТ 28147-89 в режиме CFB (предоставляется двигателем ccgost)
        gost89-cnt        `ГОСТ 28147-89 в режиме УНТ (предоставляется двигателем ccgost)

        idea-cbc           Алгоритм IDEA в режиме CBC
        idea               так же, как идея-CBC
        idea-cfb           IDEA в режиме CFB
        idea-ecb           IDEA в режиме ECB
        idea-ofb           IDEA в OFB режиме

        rc2-cbc            128 bit RC2 в CBC режиме
        rc2                Псевдоним для rc2-cbc
        rc2-cfb            128 bit RC2 в CFB режиме
        rc2-ecb            128 bit RC2 в ECB режиме
        rc2-ofb            128 bit RC2 в OFB режиме
        rc2-64-cbc         64 bit RC2 в CBC режиме
        rc2-40-cbc         40 bit RC2 в CBC режиме

        rc4                128 bit RC4
        rc4-64             64 bit RC4
        rc4-40             40 bit RC4

        rc5-cbc            RC5 шифр в CBC режиме
        rc5                Псевдоним для rc5-cbc
        rc5-cfb            RC5 шифр в CFB режиме
        rc5-ecb            RC5 шифр в ECB режиме
        rc5-ofb            RC5 шифр в OFB режиме

        seed-cbc           SEED шифр в CBC режиме
        seed               Псевдоним для seed-cbc
        seed-cfb           SEED шифр в CFB режиме
        seed-ecb           SEED шифр в ECB режиме
        seed-ofb           SEED шифр в OFB режиме

        sm4-cbc            SM4 шифр в CBC режиме
        sm4                Псевдоним для sm4-cbc
        sm4-cfb            SM4 шифр в CFB режиме
        sm4-ctr            SM4 шифр в CTR режиме
        sm4-ecb            SM4 шифр в ECB режиме
        sm4-ofb            SM4 шифр в OFB режиме

        aes-[128|192|256]-cbc  128/192/256 bit AES в CBC режиме
        aes[128|192|256]       Псевдоним для aes-[128|192|256]-cbc
        aes-[128|192|256]-cfb  128/192/256 bit AES в 128 bit CFB режиме
        aes-[128|192|256]-cfb1 128/192/256 bit AES в 1 bit CFB режиме
        aes-[128|192|256]-cfb8 128/192/256 bit AES в 8 bit CFB режиме
        aes-[128|192|256]-ctr  128/192/256 bit AES в CTR режиме
        aes-[128|192|256]-ecb  128/192/256 bit AES в ECB режиме
        aes-[128|192|256]-ofb  128/192/256 bit AES в OFB режиме

        aria-[128|192|256]-cbc  128/192/256 bit ARIA в CBC режиме
        aria[128|192|256]       Псевдоним для aria-[128|192|256]-cbc
        aria-[128|192|256]-cfb  128/192/256 bit ARIA в 128 bit CFB режиме
        aria-[128|192|256]-cfb1 128/192/256 bit ARIA в 1 bit CFB режиме
        aria-[128|192|256]-cfb8 128/192/256 bit ARIA в 8 bit CFB режиме
        aria-[128|192|256]-ctr  128/192/256 bit ARIA в CTR режиме
        aria-[128|192|256]-ecb  128/192/256 bit ARIA в ECB режиме
        aria-[128|192|256]-ofb  128/192/256 bit ARIA в OFB режиме

        camellia-[128|192|256]-cbc  128/192/256 bit Camellia в CBC режиме
        camellia[128|192|256]       Псевдоним для camellia-[128|192|256]-cbc
        camellia-[128|192|256]-cfb  128/192/256 bit Camellia в 128 bit CFB режиме
        camellia-[128|192|256]-cfb1 128/192/256 bit Camellia в 1 bit CFB режиме
        camellia-[128|192|256]-cfb8 128/192/256 bit Camellia в 8 bit CFB режиме
        camellia-[128|192|256]-ctr  128/192/256 bit Camellia в CTR режиме
        camellia-[128|192|256]-ecb  128/192/256 bit Camellia в ECB режиме
        camellia-[128|192|256]-ofb  128/192/256 bit Camellia в OFB режиме

EXAMPLES
       Просто base64 кодирует двоичный файл:

        openssl base64 -in file.bin -out file.b64

       Декодировать тот же файл

        openssl base64 -d -in file.b64 -out file.bin

       Зашифруйте файл, используя AES-128, используя запрашиваемый пароль и
       ключ PBKDF2:

        openssl enc -aes128 -pbkdf2 -in file.txt -out file.aes128

       Расшифруйте файл, используя предоставленный пароль:

        openssl enc -aes128 -pbkdf2 -d -in file.aes128 -out file.txt \
           -pass pass:<password>

       Зашифруйте файл, затем закодируйте его с помощью base64 (например, его
       можно отправить по почте), используя AES-256 в режиме CTR и
       получение ключа PBKDF2:

        openssl enc -aes-256-ctr -pbkdf2 -a -in file.txt -out file.aes256

       Base64 декодирует файл, а затем расшифровывает его, используя пароль,
       указанный в файле:

        openssl enc -aes-256-ctr -pbkdf2 -d -a -in file.aes256 -out file.txt \
           -pass file:<passfile>

BUGS
       Опция -A при использовании с большими файлами не работает должным образом.

       Программа enc поддерживает только фиксированное количество алгоритмов с
       определенными параметрами. Так, если, например, вы хотите использовать RC2
       с 76-битным ключом или RC4 с 84-битным ключом, вы не можете использовать
       эту программу.

HISTORY
       Дайджест по умолчанию был изменен с MD5 на SHA256 в Openssl 1.1.0.

COPYRIGHT
       Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the OpenSSL license (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.

1.1.1a                            2018-11-20                            ENC(1)
