PKEYUTL(1)                          OpenSSL                         PKEYUTL(1)

NAME
       openssl-pkeyutl, pkeyutl - утилита с открытым ключом

SYNOPSIS
       openssl pkeyutl [-help] [-in file] [-out file] [-sigfile file] [-inkey
       file] [-keyform PEM|DER|ENGINE] [-passin arg] [-peerkey file]
       [-peerform PEM|DER|ENGINE] [-pubin] [-certin] [-rev] [-sign] [-verify]
       [-verifyrecover] [-encrypt] [-decrypt] [-derive] [-kdf algorithm]
       [-kdflen length] [-pkeyopt opt:value] [-hexdump] [-asn1parse] [-rand
       file...]  [-writerand file] [-engine id] [-engine_impl]

DESCRIPTION
       Команда pkeyutl может использоваться для выполнения операций с открытым
       ключом низкого уровня с использованием любого поддерживаемого алгоритма.

OPTIONS
       -help
           Распечатайте сообщение об использовании.

       -in filename
           Здесь указывается вход filename для чтения данных или стандартный ввод,
           если эта опция не указана.

       -out filename
           Задает вывод filename для записи или стандартный вывод по умолчанию.

       -sigfile file
           Файл подписи, необходимый только для проверочных операций

       -inkey file
           Файл ввода ключа, по умолчанию это должен быть закрытый ключ.

       -keyform PEM|DER|ENGINE
           Формат ключа PEM, DER или ENGINE. По умолчанию PEM.

       -passin arg
           Ключ ввода источника пароля. Для получения дополнительной информации о
           формате arg см. Раздел PASS PHRASE ARGUMENTS в openssl(1)..

       -peerkey file
           Файл однорангового ключа, используемый операциями деривации
           (согласования) ключа.

       -peerform PEM|DER|ENGINE
           Формат однорангового ключа PEM, DER или ENGINE. По умолчанию PEM.

       -pubin
           Входной файл является открытым ключом.

       -certin
           Вход является сертификатом, содержащим открытый ключ.

       -rev
           Обратный порядок входного буфера. Это полезно для некоторых библиотек
           (таких как CryptoAPI), которые представляют буфер в формате с прямым
           порядком байтов.

       -sign
           Подпишите входные данные (которые должны быть хешами) и выведите
           подписанный результат. Для этого требуется закрытый ключ.

       -verify
           Проверьте входные данные (которые должны быть хэшем) по отношению к
           файлу подписи и укажите, была ли проверка успешной или неудачной.

       -verifyrecover
           Проверьте входные данные (которые должны быть хешами) и выведите
           восстановленные данные.

       -encrypt
           Зашифруйте входные данные с помощью открытого ключа.

       -decrypt
           Расшифруйте входные данные с помощью закрытого ключа.

       -derive
           Получите общий секрет с помощью однорангового ключа.

       -kdf algorithm
           Используйте алгоритм получения ключа. Поддерживаемые алгоритмы в настоящее
           время TLS1-PRF и HKDF. Примечание: обычно для этого должны быть установлены
           дополнительные параметры и выходная длина KDF. Смотри
           EVP_PKEY_CTX_set_hkdf_md(3) и EVP_PKEY_CTX_set_tls1_prf_md(3) для
           поддерживаемых строковых параметров каждого алгоритма.

       -kdflen length
           Установите выходную длину для KDF.

       -pkeyopt opt:value
           Параметры открытого ключа определены как opt:value. Смотрите примечания
           ниже для более подробной информации.

       -hexdump
           шестнадцатеричный дамп выходных данных.

       -asn1parse
           Разбор выходных данных ASN.1, это полезно при сочетании с опцией
           -verifyrecover, когда структура ASN1 подписана.

       -rand file...
           Файл или файлы, содержащие случайные данные, используемые для заполнения
           генератора случайных чисел. Можно указать несколько файлов, разделенных
           символом, зависящим от ОС. Разделителем является ';' для MS-Windows, ',' для
           OpenVMS и ':' для всех остальных.

       [-writerand file]
           Записывает случайные данные в указанный файл при выходе. Это может быть
           использовано с последующим флагом -rand.

       -engine id
           Указание механизма (по его уникальной строке идентификатора) заставит
           pkeyutl попытаться получить функциональную ссылку на указанный механизм,
           тем самым инициализируя его при необходимости. Движок будет установлен по
           умолчанию для всех доступных алгоритмов.

       -engine_impl
           При использовании с параметром -engine он также указывает на использование
           идентификатора механизма для операций шифрования.

NOTES
       Поддерживаемые операции и параметры зависят от алгоритма ключа и его реализации.
       Операции и опции OpenSSL указаны ниже.

       Если не указано иное, все алгоритмы поддерживают опцию digest:alg, которая
       задает дайджест, используемый для операций подписи, проверки и восстановления.
       Значение alg должно представлять имя дайджеста, которое используется в функции
       EVP_get_digestbyname(), например, sha1. Это значение не используется для
       хеширования входных данных. Это используется (некоторыми алгоритмами) для
       проверки правильности длины данных, передаваемых в pkeyutl, и для создания
       структур, составляющих сигнатуру (например, DigestInfo в сигнатурах
       RSASSA PKCS#1 v1.5).

       Эта утилита не хэширует входные данные, а использует данные непосредственно
       в качестве входных данных для алгоритма подписи. В зависимости от типа ключа,
       типа подписи и режима заполнения максимальные допустимые длины входных данных
       различаются. Подписанные данные не могут быть длиннее ключевого модуля с RSA.
       В случае ECDSA и DSA данные не должны быть длиннее размера поля, иначе они
       будут незаметно усечены до размера поля. В любом случае входной размер не
       должен превышать максимально поддерживаемый размер дайджеста.

       Другими словами, если значение дайджеста равно sha1, на входе должно быть
       двоичное кодирование длиной 20 байтов выходных данных хэш-функции SHA-1.

       Алгоритмы подписи Ed25519 и Ed448 не поддерживаются этой утилитой. Они принимают
       ввод без хеширования, но эта утилита может использоваться только для подписи
       ввода с хешированием.

RSA ALGORITHM
       Алгоритм RSA обычно поддерживает операции шифрования, дешифрования, подписи,
       проверки и восстановления. Однако некоторые режимы заполнения поддерживают
       только подмножество этих операций. Поддерживаются следующие дополнительные
       значения pkeyopt:

       rsa_padding_mode:mode
           Это устанавливает режим заполнения RSA. Приемлемые значения для режима:
           pkcs1 для заполнения PKCS#1,
           sslv23 для заполнения SSLv23,
           none для no padding,
           oaep для режима OAEP,
           x931 для режима X9.31 и
           pss для PSS.

           В заполнении PKCS#1, если дайджест сообщения не установлен, то предоставленные
           данные подписываются или проверяются напрямую вместо использования структуры
           DigestInfo. Если дайджест установлен, то используется структура DigestInfo,
           длина которой должна соответствовать типу дайджеста.

           Для режима oaep поддерживается только шифрование и дешифрование.

           Для x931, если задан тип дайджеста, он используется для форматирования
           данных блока, в противном случае первый байт используется для указания
           дайджеста X9.31 ID. Подписывать, проверять и проверять восстановление
           можно в этом режиме.

           Для режима pss поддерживаются только подпись и проверка, и тип дайджеста
           должен быть указан.

       rsa_pss_saltlen:len
           Для режима pss только эта опция указывает длину соли. Поддерживаются три
           специальных значения:
           "digest" устанавливает длину соли в длину дайджеста,
           "max" устанавливает длину соли в максимально допустимое значение.
           "auto" при проверке автоматически определяется длина соли на основе
           блочной структуры PSS.

       rsa_mgf1_md:digest
           Для отступа PSS и OAEP устанавливает дайджест MGF1. Если дайджест MGF1
           явно не установлен в режиме PSS, то используется дайджест подписи.

RSA-PSS ALGORITHM
       Алгоритм RSA-PSS является ограниченной версией алгоритма RSA, который
       поддерживает только знак и проверяет операции с заполнением PSS. Поддерживаются
       следующие дополнительные значения pkeyopt: 

       rsa_padding_mode:mode, rsa_pss_saltlen:len, rsa_mgf1_md:digest
           Они имеют то же значение, что и алгоритм RSA, с некоторыми дополнительными
           ограничениями. Режим заполнения может быть установлен только на pss, что
           является значением по умолчанию.

           Если ключ имеет ограничения параметров, чем для дайджеста, для дайджеста MGF1
           и длины соли устанавливаются значения, указанные в параметрах. Дайджест и MG
           не могут быть изменены, а длина соли не может быть установлена ​​на значение
           меньше минимального ограничения.

DSA ALGORITHM
       Алгоритм DSA поддерживает только операции подписи и проверки. В настоящее время
       нет никаких дополнительных опций, кроме дайджеста. Можно использовать только
       дайджест SHA1, и этот дайджест принят по умолчанию.

DH ALGORITHM
       Алгоритм DH поддерживает только операцию деривации и никаких дополнительных опций.

EC ALGORITHM
       Алгоритм EC поддерживает операции со знаком, проверкой и выводом. Операции sign и
       verify используют ECDSA, а производные - ECDH. В настоящее время нет никаких
       дополнительных опций, кроме дайджеста. Можно использовать только дайджест SHA1,
       и этот дайджест принят по умолчанию.

X25519 and X448 ALGORITHMS
       Алгоритмы X25519 и X448 поддерживают только получение ключей. На данный момент
       дополнительных опций нет.

EXAMPLES
       Подпишите некоторые данные с помощью закрытого ключа:

        openssl pkeyutl -sign -in file -inkey key.pem -out sig

       Восстановить подписанные данные (например, если используется ключ RSA):

        openssl pkeyutl -verifyrecover -in sig -inkey key.pem

       Проверьте подпись (например, ключ DSA):

        openssl pkeyutl -verify -in file -sigfile sig -inkey key.pem

       Подписать данные, используя значение дайджеста сообщения (в настоящее время
       это действительно только для RSA):

        openssl pkeyutl -sign -in file -inkey key.pem -out sig -pkeyopt digest:sha256

       Получите общий секретный показатель:

        openssl pkeyutl -derive -inkey key.pem -peerkey pubkey.pem -out secret

       Hexdump 48 байтов PRF TLS1 с использованием дайджеста SHA256 и общего
       секрета и начального числа, состоящего из одного байта 0xFF:

        openssl pkeyutl -kdf TLS1-PRF -kdflen 48 -pkeyopt md:SHA256 \
           -pkeyopt hexsecret:ff -pkeyopt hexseed:ff -hexdump

SEE ALSO
       genpkey(1), pkey(1), rsautl(1) dgst(1), rsa(1), genrsa(1),
       EVP_PKEY_CTX_set_hkdf_md(3), EVP_PKEY_CTX_set_tls1_prf_md(3)

COPYRIGHT
       Copyright 2006-2018 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the OpenSSL license (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.

1.1.1a                            2018-11-20                        PKEYUTL(1)
