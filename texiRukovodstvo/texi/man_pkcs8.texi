PKCS8(1)                            OpenSSL                           PKCS8(1)

NAME
       openssl-pkcs8, pkcs8 - PKCS#8 формат закрытого ключа инструмент преобразования

SYNOPSIS
       openssl pkcs8 [-help] [-topk8] [-inform PEM|DER] [-outform PEM|DER]
       [-in filename] [-passin arg] [-out filename] [-passout arg] [-iter
       count] [-noiter] [-rand file...]  [-writerand file] [-nocrypt]
       [-traditional] [-v2 alg] [-v2prf alg] [-v1 alg] [-engine id] [-scrypt]
       [-scrypt_N N] [-scrypt_r r] [-scrypt_p p]

DESCRIPTION
       Команда pkcs8 обрабатывает закрытые ключи в формате PKCS#8. Она может обрабатывать
       как незашифрованный PKCS#8 формат PrivateKeyInfo и формат EncryptedPrivateKeyInfo
       с различными PKCS#5 (v1.5 и v2.0) и PKCS#12 алгоритмов.

OPTIONS
       -help
           Распечатайте сообщение об использовании.

       -topk8
           Обычно PKCS#8 закрытый ключ, как ожидается, на входе и секретный ключ
           будет записан в выходной файл. С опцией -topk8 ситуация перевернута:
           он читает секретный ключ и записывает ключ формата PKCS#8.

       -inform DER|PEM
           Этот параметр определяет формат ввода: см "KEY FORMATS" для более
           подробной информации. По умолчанию используется формат PEM.

       -outform DER|PEM
           Этот параметр определяет формат вывода: см "KEY FORMATS" для
           более подробной информации. По умолчанию используется формат PEM.

       -traditional
           Когда эта опция присутствует и -topk8 не традиционный формат
           закрытого ключа записывается.

       -in filename
           Это указует входной файл для чтения ключа из стандартного ввода
           или, если этот параметр не указан. Если ключ зашифрован парольная
           фраза будет предложена.

       -passin arg
           Исходный пароль входного файла. Для получения более подробной
           информации о формате арг смотрите раздел PASS PHRASE ARGUMENTS
           в openssl(1).

       -out filename
           Определяет имя выходного файла, чтобы написать ключ или стандартный
           вывод по умолчанию. Если какие-либо параметры шифрования устанавливается
           затем парольная фраза будет предложена. Имя выходного файла не должно
           быть таким же, как имя входного файла.

       -passout arg
           Исходный пароль выходного файла. Для получения более подробной
           информации о формате арг смотрите раздел PASS PHRASE ARGUMENTS
           в openssl(1).

       -iter count
           При создании новых контейнеров PKCS#8, использовать заданное
           число итераций на пароле при выводе ключа шифрования для вывода
           PKCS#8. Высокие значения увеличивают время, необходимое для
           BruteForce в PKCS#8 контейнер.

       -nocrypt
           ключи генерируются PKCS#8 или ввод, как правило, PKCS#8
           EncryptedPrivateKeyInfo структуры с использованием алгоритма
           шифрования на основе соответствующего пароля. С помощью этой опции,
           как ожидается, структура незашифрованном PrivateKeyInfo или выход.
           Эта опция не шифровать закрытые ключи на всех и должны использоваться
           только тогда, когда это абсолютно необходимо. Некоторые программы,
           такие как некоторые версии программного кода подписи Java используется
           в незашифрованном виде закрытых ключей.

       -rand file...
           Файл или файлы, содержащие случайные данные используются для
           инициализации генератора случайных чисел. Несколько файлов могут
           быть отделены друг от ОС в зависимости от характера. Сепаратор;
           для MS-Windows, для OpenVMS, а также: для всех остальных.

       [-writerand file]
           Пишет случайные данные в указанный файл при выходе. Это может
           быть использовано с последующим флагом -rand.

       -v2 alg
           Этот параметр задает алгоритм PKCS#5 v2.0.

           alg аргумент является алгоритм шифрования для использования,
           допустимые значения включают aes128, aes256 и des3. Если этот
           параметр не указан, то используется aes256.

       -v2prf alg
           Этот параметр задает алгоритм PRF для использования с PKCS#5 v2.0.
           Типичное значение значения будет hmacWithSHA256. Если этот параметр
           не задан, то по умолчанию для шифра используется или hmacWithSHA256,
           если нет по умолчанию.

           Некоторые реализации могут не поддерживать алгоритмы пользовательских
           PRF и может потребоваться возможность hmacWithSHA1 к работе.

       -v1 alg
           Этот параметр указывает алгоритм PKCS#5 v1.5 или PKCS#12 следует
           использовать. Некоторые старые реализации могут не поддерживать
           PKCS#5 v2.0 и может потребовать этот вариант. Если не используется
           определенная форма PKCS#5 v2.0.

       -engine id
           Определение двигателя (по его уникальной строке идентификаторов)
           будет вызывать pkcs8, чтобы попытаться получить функциональную
           ссылку на указанном двигатель, таким образом, инициализация его в
           случае необходимости. Двигатель будет установлен по умолчанию для
           всех доступных алгоритмов.

       -scrypt
           Использует алгоритм Scrypt для шифрования секретного ключа с
           использованием параметров по умолчанию: в настоящее время N=16384,
           r=8 и p=1 и AES в режиме CBC с 256 битным ключом. Эти параметры
           могут быть изменены с помощью -scrypt_N, -scrypt_r, -scrypt_p и
           -v2 варианты.

       -scrypt_N N -scrypt_r r -scrypt_p p
           Устанавливает параметры Scrypt N, r или p параметры.

KEY FORMATS
       Различные различные форматы используются утилитой pkcs8. Они
       подробно описаны ниже.

       Если ключ преобразуется из формы PKCS#8 (т.е. вариант -topk8 не
       используется), то входной файл должен быть в формате PKCS#8.
       Зашифрованный ключ, как ожидается, если -nocrypt не входит.

       Если -topk8 не используется и режим PEM установлен выходной
       файл будет в незашифрованном виде закрытого ключа в формате PKCS#8.
       Если -traditional опция используется, то традиционный формат
       закрытый ключ записывается вместо этого.

       Если -topk8 не используется и режим DER установлен выходной
       файл будет в незашифрованном виде закрытого ключа в
       традиционном формате DER.

       Если -topk8 используется, то любое поддерживаемое закрытый ключ
       может быть использован для входного файла в формате, определенном
       -inform. Выходной файл будет зашифрован формат PKCS#8, используя
       указанные параметры шифрования, если -nocrypt не входит.

NOTES
       По умолчанию при преобразовании ключа в формате PKCS#8, PKCS#5 v2.0
       с использованием 256-битного AES с HMAC и SHA256 используется.

       Некоторые старые реализации не поддерживают формат PKCS#5 v2.0 и
       требуют более старую форму PKCS#5 v1.5 вместо этого, возможно,
       также требует небезопасных нестойкие алгоритмы шифрования,
       такие как 56 разрядное DES.

       Зашифрованные виде PEM закодировать файлы PKCS#8 используются
       следующие заголовки и колонтитулы:

        -----BEGIN ENCRYPTED PRIVATE KEY-----
        -----END ENCRYPTED PRIVATE KEY-----

       В незашифрованном виде использования:

        -----BEGIN PRIVATE KEY-----
        -----END PRIVATE KEY-----

       Закрытые ключи, зашифрованные с помощью алгоритмов PKCS#5 v2.0 и
       большого счетчик итераций являются более безопасными, что те, что
       зашифровано с использованием традиционного SSLeay совместимых форматов.
       Так что, если дополнительная безопасность считается важным ключи
       должны быть преобразованы.

       Можно выписать DER закодированные зашифрованы частные ключи в формате
       PKCS#8, поскольку детали шифрования включены на уровне ASN1 в то
       время как традиционный формат включает их на уровне PEM.

PKCS#5 v1.5 and PKCS#12 algorithms.
       Различные алгоритмы могут быть использованы с помощью опции командной
       строки -v1, в том числе и PKCS#5 v1.5 PKCS#12. Они описаны более подробно ниже.

       PBE-MD2-DES PBE-MD5-DES
           Эти алгоритмы были включены в оригинальной спецификации
           PKCS#5 v1.5. Они предлагают только 56 бит защиты, так
           как они оба используют DES.

       PBE-SHA1-RC2-64, PBE-MD2-RC2-64, PBE-MD5-RC2-64, PBE-SHA1-DES
           Эти алгоритмы не упоминаются в оригинальной спецификации PKCS#5 v1.5,
           но они используют один и тот же алгоритм деривации ключа и поддерживаются
           некоторым программным обеспечением. Они упоминаются в PKCS#5 v2.0. Они
           используют либо 64-битный RC2 или 56 битный DES.

       PBE-SHA1-RC4-128, PBE-SHA1-RC4-40, PBE-SHA1-3DES, PBE-SHA1-2DES,
       PBE-SHA1-RC2-128, PBE-SHA1-RC2-40
           Эти алгоритмы используют алгоритм шифрования на основе PKCS#12 паролей
           и позволяют сильные алгоритмы шифрования, такие как тройная DES или
           128 битного RC2 для использования.

EXAMPLES
       Преобразование закрытого ключа в формате PKCS#8 с использованием
       параметров по умолчанию (AES с 256-битным ключом и hmacWithSHA256):

        openssl pkcs8 -in key.pem -topk8 -out enckey.pem

       Преобразовать закрытый ключ PKCS#8 незашифрованном формате:

        openssl pkcs8 -in key.pem -topk8 -nocrypt -out enckey.pem

       Преобразование закрытого ключа в формате PKCS#5 v2.0 с
       использованием тройной DES:

        openssl pkcs8 -in key.pem -topk8 -v2 des3 -out enckey.pem

       Преобразование закрытого ключа в формате PKCS#5 v2.0
       используя AES с 256 бит в режиме CBC и hmacWithSHA512 PRF:

        openssl pkcs8 -in key.pem -topk8 -v2 aes-256-cbc -v2prf hmacWithSHA512 -out enckey.pem

       Преобразовать закрытый ключ PKCS#8 с помощью PKCS#5 1.5 совместимого алгоритма
       (DES):

        openssl pkcs8 -in key.pem -topk8 -v1 PBE-MD5-DES -out enckey.pem

       Преобразовать закрытый ключ PKCS#8 с помощью PKCS#12 совместимого алгоритма
       (3DES):

        openssl pkcs8 -in key.pem -topk8 -out enckey.pem -v1 PBE-SHA1-3DES

       Почитаю закрытый ключ DER незашифрованном формате PKCS#8:

        openssl pkcs8 -inform DER -nocrypt -in key.der -out key.pem

       Преобразовать закрытый ключ из любого PKCS#8 зашифрованного вида
       в традиционный формат:

        openssl pkcs8 -in pk8.pem -traditional -out key.pem

       Преобразование закрытого ключа PKCS#8 формат, шифрование с
       AES-256 и с одного миллиона итераций пароля:

        openssl pkcs8 -in key.pem -topk8 -v2 aes-256-cbc -iter 1000000 -out pk8.pem

STANDARDS
       Тестовые векторы этой реализации PKCS#5 v2.0 были отправлены в список
       pkcs-tng рассылки с использованием тройной DES, DES and RC2 с высоким
       количеством итераций, несколько людей подтвердили, что они могли бы
       расшифровать секретные ключи производятся и поэтому можно предположить,
       что реализация PKCS#5 v2.0 достаточно точно, по крайней мере, насколько
       эти алгоритмы обеспокоены.

       Формат PKCS#8 DSA (и других) закрытых ключей не очень хорошо
       задокументированы: он спрятан в PKCS#11 v2.01, раздел 11.9.
       OpenSSL's по умолчанию DSA PKCS#8 закрытый ключ удовлетворяет
       формат с этим стандартом.

BUGS
       Там должен быть вариант, который печатает алгоритм шифрования в
       использовании и другие детали, такие как счетчик итераций.

SEE ALSO
       dsa(1), rsa(1), genrsa(1), gendsa(1)

HISTORY
       The -iter option was added to OpenSSL 1.1.0.

COPYRIGHT
       Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the OpenSSL license (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.

1.1.1a                            2018-11-20                          PKCS8(1)
