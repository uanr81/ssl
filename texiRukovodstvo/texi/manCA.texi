@node CA, X509, X509V3_CONFIG, Top
@chapter CA
@table @asis
@item NAME
       openssl-ca, ca - пример минимального применения CA

@item SYNOPSIS
       openssl ca [@ref{ca -help,, -help}] [@ref{ca -verbose,, -verbose}] [@ref{ca -config filename,, -config filename}] [@ref{ca -name section,, -name section}] [-gencrl] [@ref{ca -revoke filename,, -revoke filename}] [@ref{ca -valid filename,, -valid filename}] [@ref{ca -status serial,, -status serial}] [@ref{ca -updatedb,, -updatedb}] [@ref{ca -crl_reason reason,, -crl_reason reason}] [@ref{ca -crl_hold instruction,, -crl_hold instruction}] [@ref{ca -crl_compromise time,, -crl_compromise time}] [@ref{ca -crl_CA_compromise time,, -crl_CA_compromise time}] [@ref{ca -crldays num,, -crldays num}] [@ref{ca -crlhours num,, -crlhours num}] [@ref{ca -crlexts section,, -crlexts section}] [@ref{ca -startdate date,, -startdate date}] [@ref{ca -enddate date,, -enddate date}] [@ref{ca -days arg,, -days arg}] [@ref{ca -md alg,, -md alg}] [@ref{ca -policy arg,, -policy arg}] [@ref{ca -keyfile filename,, -keyfile filename}] [@ref{ca -keyform PEM|DER,, -keyform PEM|DER}] [@ref{ca -key password,, -key password}] [@ref{ca -passin arg,, -passin arg}] [@ref{ca -cert,, -cert file}] [@ref{ca -selfsign,, -selfsign}] [@ref{ca -in filename,, -in filename}] [@ref{ca -out filename,, -out filename}] [@ref{ca -notext,, -notext}] [@ref{ca -outdir directory,, -outdir directory}] [@ref{ca -infiles,, -infiles}] [@ref{ca -spkac filename,, -spkac filename}] [@ref{ca -ss_cert filename,, -ss_cert filename}] [@ref{ca -preserveDN,, -preserveDN}] [@ref{ca -noemailDN,, -noemailDN}] [@ref{ca -batch,, -batch}] [@ref{ca -msie_hack,, -msie_hack}] [@ref{ca -extensions section,, -extensions section}] [@ref{ca -extfile file,, -extfile file}] [@ref{ca -engine id,, -engine id}] [@ref{ca -subj arg,, -subj arg}] [@ref{ca -utf8,, -utf8}] [@ref{ca -create_serial,, -create_serial}] [@ref{ca -rand_serial,, -rand_serial}] [@ref{ca -multivalue-rdn,, -multivalue-rdn}] [@ref{ca -rand file...,, -rand file...}] [@ref{ca [-writerand file],, [-writerand file]}]

@item Параметры файла конфигурации
[@ref{ca CONFIGURATION FILE OPTIONS,, CONFIGURATION FILE OPTIONS}] [@ref{ca oid_file,, oid_file}] [@ref{ca oid_section,, oid_section}] [@ref{ca new_certs_dir,, new_certs_dir}] [@ref{ca certificate,, certificate}] [@ref{ca private_key,, private_key}] [@ref{ca RANDFILE,, RANDFILE}] [@ref{ca default_days,, default_days}] [@ref{ca default_startdate,, default_startdate}] [@ref{ca default_enddate,, default_enddate}] [@ref{ca default_crl_hours default_crl_days,, default_crl_hours default_crl_days}] [@ref{ca default_md,, default_md}] [@ref{ca database,, database}] [@ref{ca unique_subject,, unique_subject}] [@ref{ca serial,, serial}] [@ref{ca crlnumber,, crlnumber}] [@ref{ca x509_extensions,, x509_extensions}] [@ref{ca crl_extensions,, crl_extensions}] [@ref{ca preserve,, preserve}] [@ref{ca email_in_dn,, email_in_dn}] [@ref{ca msie_hack,, msie_hack}] [@ref{ca policy,, policy}] [@ref{ca name_opt, cert_opt,, name_opt, cert_opt}] [@ref{ca copy_extensions,, copy_extensions}]
@item @ref{ca (Примеры),, (Примеры)}
@item DESCRIPTION
       Команда ca является минимальным приложением CA. Оно может быть
       использовано для подписи запросов на сертификаты в различных формах
       и генерации CRL. Оно также поддерживает текстовую базу данных
       выданных сертификатов и их статус.

       Описание параметров будет разделено по категориям.

@item OPTIONS
@table @asis
@item -help @anchor{ca -help}
           Распечатайте сообщение об использовании.

@item       -verbose @anchor{ca -verbose}
           Это печатает дополнительную информацию о выполняемых операциях.

@item       -config filename @anchor{ca -config filename}
           Указывает файл конфигурации для использования. Необязательный;
           описание значения по умолчанию см. в "COMMAND SUMMARY" в
           openssl(1).

@item       -name section @anchor{ca -name section}
           Определяет раздел файла конфигурации для использования
           (переопределяет default_ca в разделе ca).

@item       -in filename @anchor{ca -in filename}
           Входное имя файла, содержащее один запрос сертификата, который
           должен быть подписан CA.

@item       -ss_cert filename @anchor{ca -ss_cert filename}
           Один сертификат self-signed для подписи CA.

@item       -spkac filename @anchor{ca -spkac filename}
           Файл, содержащий один открытый ключ и запрос, подписанный
           Netscape, и дополнительные значения полей, которые должны быть
           подписаны CA. Смотри раздел SPKAC FORMAT для получения информации
           о требуемом формате ввода и вывода.

@item       -infiles @anchor{ca -infiles}
           Если присутствует, это должен быть последний параметр, все
           последующие аргументы принимаются в качестве имен файлов, содержащих
           запросы сертификатов.

@item       -out filename @anchor{ca -out filename}
           Выходной файл для вывода сертификатов. По умолчанию используется
           стандартный вывод. Детали сертификата также будут распечатаны в этот
           файл в формате PEM (за исключением того, что -spkac выводит
           формат DER).

@item       -outdir directory @anchor{ca -outdir directory}
           Каталог для вывода сертификатов. Сертификат будет записан в файл с
           именем, состоящим из шестнадцатеричного серийного номера
           с добавлением ".pem".

@item       -cert @anchor{ca -cert}
           Файл сертификата CA.

@item       -keyfile filename @anchor{ca -keyfile filename}
           Закрытый ключ для подписи запросов.

@item       -keyform PEM|DER @anchor{ca -keyform PEM|DER}
           Формат данных в файле закрытого ключа. По умолчанию используется PEM.

@item       -key password @anchor{ca -key password}
           Пароль, используемый для шифрования закрытого ключа. Поскольку в
           некоторых системах аргументы командной строки видимы
           (Unix с утилитой 'ps'), эту опцию следует использовать
           с осторожностью.

@item       -selfsign @anchor{ca -selfsign}
           Указывает, что выданные сертификаты должны быть подписаны ключом,
           с которым были подписаны запросы сертификатов (предоставляется с
           помощью -keyfile). Запросы на сертификат, подписанные другим
           ключом, игнорируются. Если заданы -spkac, -ss_cert или -gencrl,
           -selfsign игнорируется.

           Следствием использования -selfsign является то, что сертификат
           self-signed появляется среди записей в базе данных сертификатов
           (см. Базу данных параметров конфигурации) и использует тот же
           счетчик серийного номера, что и все другие сертификаты,
           подписанные сертификатом self-signed.

@item       -passin arg @anchor{ca -passin arg}
           Ключевой источник пароля. Для получения дополнительной информации
           о формате arg смотрите раздел PASS PHRASE ARGUMENTS в openssl.

@item       -notext @anchor{ca -notext}
           Не выводите текстовую форму сертификата в выходной файл.

@item       -startdate date @anchor{ca -startdate date}
           Это позволяет явно установить дату начала. Формат даты:
           YYMMDDHHMMSSZ (такой же, как структура ASN1 UTCTime) или
           YYYYMMDDHHMMSSZ (такой же, как структура ASN1 GeneralizedTime).
           В обоих форматах должны присутствовать секунды SS и часовой пояс Z.

@item       -enddate date @anchor{ca -enddate date}
           Это позволяет явно установить дату истечения срока действия. Формат
           даты: YYMMDDHHMMSSZ (такой же, как структура ASN1 UTCTime) или
           YYYYMMDDHHMMSSZ (такой же, как структура ASN1 GeneralizedTime).
           В обоих форматах должны присутствовать секунды SS и часовой
           пояс Z.

@item       -days arg @anchor{ca -days arg}
           Количество дней для сертификации сертификата.

@item       -md alg @anchor{ca -md alg}
           Дайджест сообщения для использования. Можно использовать любой дайджест,
           поддерживаемый командой OpenSSL dgst. Для алгоритмов подписи, которые
           не поддерживают дайджест (Ed25519 и Ed448), любой заданный дайджест
           сообщения игнорируется. Эта опция также применяется к CRL.

@item       -policy arg @anchor{ca -policy arg}
           Эта опция определяет CA "policy" для использования. Это раздел в
           файле конфигурации, который решает, какие поля должны быть
           обязательными или соответствовать сертификату CA. Проверьте
           раздел POLICY FORMAT для получения дополнительной информации.

@item       -msie_hack @anchor{ca -msie_hack}
           Это устаревшая опция, чтобы заставить ca работать с очень
           старыми версиями IE управления регистрацией сертификатов
           "certenr3". Он использовал UniversalStrings почти для всего.
           Поскольку старый элемент управления имеет различные ошибки
           безопасности, его использование настоятельно не рекомендуется.

@item       -preserveDN @anchor{ca -preserveDN}
           Обычно порядок сертификата DN совпадает с порядком полей в
           соответствующем разделе политики. Когда эта опция установлена,
           порядок совпадает с запросом. Это в основном для совместимости
           со старым элементом регистрации IE, который принимает сертификаты
           только в том случае, если их DNs соответствуют порядку запроса.
           Это не нужно для Xenroll.

@item       -noemailDN @anchor{ca -noemailDN}
           Объект DN сертификата может содержать поле EMAIL, если оно
           присутствует в запросе DN, однако, это хорошая политика -
           просто установить e-mail в расширение altName сертификата.
           Когда эта опция установлена, поле EMAIL удаляется из темы
           сертификата и устанавливается только , в конце концов,
           в присутствующих расширениях. Ключевое слово email_in_dn может
           использоваться в файле конфигурации, чтобы включить это поведение.

@item       -batch @anchor{ca -batch}
           Это устанавливает пакетный режим. В этом режиме не будет задано
           никаких вопросов, и все сертификаты будут сертифицированы
           автоматически.

@item       -extensions section @anchor{ca -extensions section}
           Раздел файла конфигурации, содержащий расширения сертификата,
           которые будут добавлены при выдаче сертификата (по умолчанию
           используется x509_extensions, если не используется опция
           -extfile). Если раздел расширения отсутствует, то создается
           сертификат V1. Если раздел расширения присутствует (даже если
           он пуст), то создается сертификат V3. См. Страницу руководства:
           x509v3_config(5) для получения подробной информации о формате
           раздела расширения.

@item       -extfile file @anchor{ca -extfile file}
           Дополнительный файл конфигурации для чтения расширений
           сертификатов (с использованием раздела по умолчанию, если также
           не используется опция -extensions).

@item       -engine id @anchor{ca -engine id}
           Указание механизма (по его уникальной строке идентификатора)
           заставит ca попытаться получить функциональную ссылку на
           указанный механизм, тем самым инициализируя его при
           необходимости. Движок будет установлен по умолчанию для всех
           доступных алгоритмов.

@item       -subj arg @anchor{ca -subj arg}
           Заменяет имя субъекта, указанное в запросе. Аргумент должен быть
           отформатирован как /type0=value0/type1=value1/type2=..... Символы
           ключевых слов могут быть экранированы с помощью / (обратная косая
           черта), и пробел сохраняется. Пустые значения разрешены, но
           соответствующий тип не будет включен в итоговый сертификат.

@item       -utf8 @anchor{ca -utf8}
           Эта опция заставляет значения полей интерпретироваться как строки
           UTF8, по умолчанию они интерпретируются как ASCII. Это означает,
           что значения полей, запрашиваемые из терминала или полученные из
           файла конфигурации, должны быть действительными строками UTF8.

@item       -create_serial @anchor{ca -create_serial}
           Если не удается прочитать серийный номер из текстового файла,
           как указано в конфигурации, указание этого параметра создает
           новый случайный серийный номер, который будет использоваться
           в качестве следующего серийного номера. Чтобы получить
           случайные серийные номера, используйте вместо этого флаг
           -rand_serial; это следует использовать только для простого
           error-recovery (исправления ошибок).

@item       -rand_serial @anchor{ca -rand_serial}
           Генерация большого случайного числа для использования в качестве
           серийного номера. Это переопределяет любую опцию или конфигурацию для
           использования файла серийного номера.

@item       -multivalue-rdn @anchor{ca -multivalue-rdn}
           Эта опция заставляет аргумент -subj интерпретироваться с полной
           поддержкой многозначного RDN. Пример:
@example
           /DC=org/DC=OpenSSL/DC=users/UID=123456+CN=John Doe

           Если -multi-rdn не используется, тогда значением UID является
           123456+CN=John Doe.
@end example
@item       -rand file... @anchor{ca -rand file...}
           Файл или файлы, содержащие случайные данные, используемые для
           заполнения генератора случайных чисел. Можно указать несколько
           файлов, разделенных символом, зависящим от ОС. Разделителем
           является ';' для MS-Windows, ',' для OpenVMS и ':' для всех остальных.

@item       [-writerand file] @anchor{ca [-writerand file]}
           Записывает случайные данные в указанный файл при выходе. Это может
           быть использовано с последующим флагом -rand.
@end table
@item CRL OPTIONS
@table @asis
@item -gencrl
           Эта опция генерирует CRL на основе информации в индексном файле.

@item       -crldays num @anchor{ca -crldays num}
           Количество дней до следующего CRL. Это дни, которые нужно разместить в
           поле CRL nextUpdate.

@item       -crlhours num @anchor{ca -crlhours num}
           Количество часов до следующего CRL.

@item       -revoke filename @anchor{ca -revoke filename}
           Имя файла, содержащее сертификат для отзыва.

@item       -valid filename @anchor{ca -valid filename}
           Имя файла, содержащее сертификат для добавления действительной
           записи сертификата.

@item       -status serial @anchor{ca -status serial}
           Отображение статуса отзыва сертификата с указанным серийным
           номером и выходов.

@item       -updatedb @anchor{ca -updatedb}
           Обновляет индекс базы данных для очистки устаревших сертификатов.

@item       -crl_reason reason @anchor{ca -crl_reason reason}
           Отзыв reason, где reason является одним из: unspecified,
           keyCompromise, CACompromise, affiliationChanged, superseded,
           cessationOfOperation, certificateHold или же removeFromCRL.
           Сопоставление причины нечувствительно к регистру. Установка
           любой причины отзыва сделает CRL v2.

           На практике removeFromCRL не особенно полезен, потому что
           он используется только в delta CRL, который в настоящее
           время не реализован.

@item       -crl_hold instruction @anchor{ca -crl_hold instruction}
           Это устанавливает код причины аннулирования CRL для
           certificateHold, а инструкцию hold - к ​​инструкции, которая
           должна быть OID. Хотя любой OID может использоваться только
           holdInstructionNone (использование которого не рекомендуется
           RFC2459), обычно используются holdInstructionCallIssuer или
           holdInstructionReject.

@item       -crl_compromise time @anchor{ca -crl_compromise time}
           Это устанавливает причину отзыва keyCompromise и компромисс
           время от времени. время должно быть в формате GeneralizedTime,
           то есть YYYYMMDDHHMMSSZ.

@item       -crl_CA_compromise time @anchor{ca -crl_CA_compromise time}
           Это то же самое, что crl_compromise, за исключением того, что
           причина отзыва установлена ​​в CACompromise.

@item       -crlexts section @anchor{ca -crlexts section}
           Раздел файла конфигурации, содержащий расширения CRL для включения.
           Если секция расширения CRL отсутствует, то создается V1 CRL, если
           секция расширения CRL присутствует (даже если она пуста), то
           создается V2 CRL. Указанные расширения CRL являются расширениями
           CRL, а не расширениями CRL. Следует отметить, что некоторые программы
           (например, Netscape) не могут обрабатывать V2 CRLs. См. Страницу
           руководства x509v3_config(5) для получения подробной информации о
           формате раздела расширения.
@end table
@item CONFIGURATION FILE OPTIONS @anchor{ca CONFIGURATION FILE OPTIONS}
       Раздел файла конфигурации, содержащий параметры для ca, находится
       следующим образом: Если используется параметр командной строки -name,
       то он называет используемый раздел. В противном случае используемый
       раздел должен быть назван в опции default_ca раздела ca файла
       конфигурации (или в разделе по умолчанию файла конфигурации). Помимо
       default_ca, следующие параметры читаются непосредственно из раздела ca:
@example
        RANDFILE  preserve
        msie_hack За исключением RANDFILE, это, вероятно, ошибка, которая
        может измениться в будущих версиях.
@end example
       Многие параметры файла конфигурации идентичны параметрам командной
       строки. Если опция присутствует в файле конфигурации и в командной
       строке, используется значение командной строки. Если параметр описан
       как обязательный, он должен присутствовать в файле конфигурации или
       в эквиваленте командной строки (если есть).
@table @asis
@item      oid_file @anchor{ca oid_file}
           Это указывает на файл, содержащий дополнительные OBJECT IDENTIFIERS.
           Каждая строка файла должна состоять из числовой формы идентификатора
           объекта, за которым следует пробел, затем короткое имя, затем
           пробел и, наконец, длинное имя.

@item       oid_section @anchor{ca oid_section}
           Это указывает на раздел в файле конфигурации, содержащий дополнительные
           идентификаторы объекта. Каждая строка должна состоять из короткого
           имени идентификатора объекта, затем = и числовой формы. Короткие и
           длинные имена одинаковы при использовании этой опции.

@item       new_certs_dir @anchor{ca new_certs_dir}
           Так же, как опция командной строки -outdir. Он указывает каталог,
           в который будут помещены новые сертификаты. Обязательный.

@item       certificate @anchor{ca certificate}
           Так же, как -cert. Это указыввает файл, содержащий сертификат CA.
           Обязательный.

@item       private_key @anchor{ca private_key}
           То же, что опция -keyfile. Файл, содержащий закрытый ключ CA.
           Обязательный.

@item       RANDFILE @anchor{ca RANDFILE}
           При запуске указанный файл загружается в генератор случайных
           чисел, а при выходе в него записывается 256 байт.

@item       default_days @anchor{ca default_days}
           Так же, как опция -days. Количество дней для сертификации сертификата.

@item       default_startdate @anchor{ca default_startdate}
           Так же, как опция -startdate. Дата начала сертификации сертификата.
           Если не установлено, используется текущее время.

@item       default_enddate @anchor{ca default_enddate}
           Так же, как -enddate option. Должна присутствовать либо эта опция,
           либо default_days (или эквиваленты командной строки).

@item       default_crl_hours default_crl_days @anchor{ca default_crl_hours default_crl_days}
           Так же, как параметры -crlhours и -crldays. Они будут использоваться
           только в том случае, если отсутствует опция командной строки. По
           крайней мере, один из них должен присутствовать для создания CRL.

@item       default_md @anchor{ca default_md}
           Так же, как опция -md. Обязательный, за исключением случаев, когда
           алгоритм подписи не требует дайджеста (Ed25519 и Ed448).

@item       database @anchor{ca database}
           Текстовый файл базы данных для использования. Обязательный. Этот
           файл должен присутствовать, хотя изначально он будет пустым.

@item       unique_subject @anchor{ca unique_subject}
           Если задано значение yes, действительные записи сертификатов в
           базе данных должны иметь уникальные субъекты. если задано значение
           no, несколько допустимых записей сертификата могут иметь
           одинаковую тему. Значение по умолчанию - yes, чтобы быть
           совместимым со старыми версиями OpenSSL (pre 0.9.8). Однако,
           чтобы упростить сертификат CA для roll-over, рекомендуется
           использовать значение no, особенно в сочетании с параметром
           командной строки -selfsign.

           Обратите внимание, что в некоторых случаях допустимо создавать
           сертификаты без какой-либо темы. В случае, когда есть несколько
           сертификатов без субъектов, это не считается дубликатом.

@item       serial @anchor{ca serial}
           Текстовый файл, содержащий следующий серийный номер для использования
           в шестнадцатеричном формате. Обязательный. Этот файл должен
           присутствовать и содержать действительный серийный номер.

@item       crlnumber @anchor{ca crlnumber}
           Текстовый файл, содержащий следующий номер CRL для использования
           в шестнадцатеричном виде. Номер crl будет вставлен в CRLs, только
           если этот файл существует. Если этот файл присутствует, он должен
           содержать действительный номер CRL.

@item       x509_extensions @anchor{ca x509_extensions}
           Такой же как -extensions.

@item       crl_extensions @anchor{ca crl_extensions}
           Такой же как -crlexts.

@item       preserve @anchor{ca preserve}
           Такой же как -preserveDN

@item       email_in_dn @anchor{ca email_in_dn}
           Так же, как -noemailDN. Если вы хотите, чтобы поле EMAIL
           было удалено из DN сертификата, просто установите для него
           значение 'no'. Если нет, то по умолчанию разрешается
           использовать EMAIL, указанный в сертификате DN.

@item       msie_hack @anchor{ca msie_hack}
           Такой же как -msie_hack

@item       policy @anchor{ca policy}
           Так же, как -policy. Обязательный. Смотрите раздел POLICY FORMAT
           для получения дополнительной информации.

@item       name_opt, cert_opt @anchor{ca name_opt, cert_opt}
           Эти параметры позволяют формат, используемый для отображения сведений
           о сертификате при запросе пользователя подтвердить подпись. Здесь можно
           использовать все параметры, поддерживаемые утилитами x509: опции
           -nameopt и -certopt, за исключением того, что no_signame и no_sigdump
           установлены постоянно и не могут быть отключены (это потому, что подпись
           сертификата не может быть отображена, так как сертификат не был подписан
           в данный момент) ,

           Для удобства значения ca_default принимаются обоими для получения
           разумного вывода.

           Если ни одна из этих опций не присутствует, используется формат,
           используемый в более ранних версиях OpenSSL. Настоятельно не
           рекомендуется использовать старый формат, поскольку он отображает
           только поля, упомянутые в разделе политики, неправильно обрабатывает
           типы строк с несколькими символами и не отображает расширения.

@item       copy_extensions @anchor{ca copy_extensions}
           Определяет, как расширения в запросах сертификата должны быть
           обработаны. Если установлено значение none или этот параметр
           отсутствует, расширения игнорируются и не копируются в сертификат.
           Если установлено копирование, то любые расширения, присутствующие
           в запросе, которые еще не присутствуют, копируются в сертификат. Если
           установлено значение copyall, то все расширения в запросе копируются в
           сертификат: если расширение уже присутствует в сертификате, оно
           сначала удаляется. Посмотрите раздел WARNINGS перед использованием
           этой опции.

           Основное использование этого параметра - разрешить запросу
           сертификата указывать значения для определенных расширений, таких
           как subjectAltName.
@end table
@item POLICY FORMAT
       Раздел политики состоит из набора переменных, соответствующих полям
       сертификата DN. Если значение равно "match", то значение поля должно
       совпадать с тем же полем в сертификате CA. Если значение равно
       "supplied", оно должно присутствовать. Если значение "optional", то
       оно может присутствовать. Любые поля, не упомянутые в разделе политики,
       автоматически удаляются, если не установлена ​​опция -preserveDN, но это
       можно считать скорее странным, чем предполагаемым поведением.

@item SPKAC FORMAT
       Входные данные для параметра командной строки -spkac представляют
       собой открытый ключ и вызов Netscape. Обычно это происходит из
       тега KEYGEN в форме HTML для создания нового закрытого ключа.
       Однако можно создать SPKAC с помощью утилиты spkac.

       Файл должен содержать переменную SPKAC, установленную на значение
       SPKAC, а также необходимые компоненты DN в виде пар имя-значение.
       Если вам нужно включить один и тот же компонент дважды, ему может
       предшествовать число и объект '.'.

       При обработке формата SPKAC выводом является DER, если используется
       флаг -out, но формат PEM, если отправляется на стандартный вывод или
       флаг -outdir.

@item EXAMPLES (Примеры) @anchor{ca (Примеры)}
       Примечание: в этих примерах предполагается, что структура каталога ca
       уже настроена, а соответствующие файлы уже существуют. Обычно это включает
       в себя создание сертификата CA и закрытого ключа с req, файла серийного
       номера и пустого файла индекса и размещение их в соответствующих
       каталогах.

       Чтобы использовать пример файла конфигурации ниже, каталоги demoCA,
       demoCA/private и demoCA/newcerts должны быть созданы. Сертификат CA
       будет скопирован в demoCA/cacert.pem, а его закрытый ключ - в
       demoCA/private/cakey.pem. Будет создан файл demoCA/serial, содержащий,
       например, "01" и пустой индексный файл demoCA/index.txt.
@table @asis
@item       Подпишите запрос на сертификат:

        openssl ca -in req.pem -out newcert.pem

@item       Подпишите запрос на сертификат, используя расширения CA:

        openssl ca -in req.pem -extensions v3_ca -out newcert.pem

@item       Создать объект CRL

        openssl ca -gencrl -out crl.pem

@item       Подпишите несколько запросов:

        openssl ca -infiles req1.pem req2.pem req3.pem

@item       Сертифицируйте Netscape SPKAC:

        openssl ca -spkac spkac.txt

@item       Пример файла SPKAC (строка SPKAC для ясности обрезана):
@display
        SPKAC=MIG0MGAwXDANBgkqhkiG9w0BAQEFAANLADBIAkEAn7PDhCeV/xIxUg8V70YRxK2A5
        CN=Steve Test
        emailAddress=steve@@openssl.org
        0.OU=OpenSSL Group
        1.OU=Another Group
@end display
@item       Пример файла конфигурации с соответствующими разделами для ca:
@display
        [ ca ]
        default_ca      = CA_default            # Раздел по умолчанию ca

        [ CA_default ]

        dir            = ./demoCA              # корневой каталог
        database       = $dir/index.txt        # индексный файл
        new_certs_dir  = $dir/newcerts         # директория новых сертификатов

        certificate    = $dir/cacert.pem       # сертификат CA
        serial         = $dir/serial           # серийный номер файла
        #rand_serial    = yes                  # для случайного серийного номера#ов
        private_key    = $dir/private/cakey.pem# CA закрытый ключ
        RANDFILE       = $dir/private/.rand    # файл случайных чисел

        default_days   = 365                   # продолжительность сертификации в днях
        default_crl_days= 30                   # продолжительность действия запроса CRL
        default_md     = md5                   # использовать md 

        policy         = policy_any            # политика по умолчанию
        email_in_dn    = no                    # Не добавляйте email в сертификат DN

        name_opt       = ca_default            # Опция отображения имени субъекта
        cert_opt       = ca_default            # Опция отображения сертификата
        copy_extensions = none                 # Не копировать расширения из запроса

        [ policy_any ]
        countryName            = supplied
        stateOrProvinceName    = optional
        organizationName       = optional
        organizationalUnitName = optional
        commonName             = supplied
        emailAddress           = optional
@end display
@item FILES
       Примечание. Расположение всех файлов может быть изменено с
       помощью параметров при компиляции записей файла
       конфигурации, переменных среды или параметров командной
       строки. Значения ниже отражают значения по умолчанию.
@display
        /usr/local/ssl/lib/openssl.cnf - главный файл конфигурации
        ./demoCA                       - основной каталог CA
        ./demoCA/cacert.pem            - CA сертификат
        ./demoCA/private/cakey.pem     - CA закрытый ключ
        ./demoCA/serial                - CA файл серийного номера
        ./demoCA/serial.old            - CA файл резервной копии серийного номера
        ./demoCA/index.txt             - CA файл текстовой базы данных
        ./demoCA/index.txt.old         - CA файл резервной копии текстовой базы данных
        ./demoCA/certs                 - файл вывода сертификата
        ./demoCA/.rnd                  - CA случайная начальная информация
@end display
@end table
@item RESTRICTIONS
       Индексный файл текстовой базы данных является важной частью процесса,
       и в случае повреждения его может быть трудно исправить. Теоретически
       возможно перестроить индексный файл из всех выданных сертификатов и
       текущего CRL: однако нет никакой возможности сделать это.
       
       Функции V2 CRL, такие как delta CRLs, в настоящее время не
       поддерживаются.

       Хотя несколько запросов могут быть введены и обработаны одновременно,
       можно включить только один сертификат SPKAC или self-signed.

@item BUGS
       Использование текстовой базы данных in-memory может вызвать проблемы
       при наличии большого количества сертификатов, поскольку, как следует
       из названия, база данных должна храниться в памяти.

       Команда ca действительно нуждается в переписывании или требуемой
       функциональности на уровне команды или интерфейса, чтобы более
       дружественная утилита (скрипт Perl или GUI) могла правильно
       обрабатывать вещи. Сценарий CA.pl помогает немного, но не очень.

       Любые поля в запросе, которых нет в политике, удаляются без
       уведомления. Этого не происходит, если используется опция
       -preserveDN. Чтобы обеспечить отсутствие поля EMAIL внутри DN,
       как предлагает RFCs, независимо от содержания субъекта запроса,
       можно использовать опцию -noemailDN. Поведение должно быть более
       дружелюбным и настраиваемым.

       Отмена некоторых команд путем отказа от сертификации сертификата
       может создать пустой файл.

@item WARNINGS
       Команда ca причудливая и порой совершенно недружелюбная.

       Утилита ca изначально была задумана как пример того, как делать
       вещи в CA. Она не должна была использоваться как полноценный объект CA:
       тем не менее, некоторые люди используют её для этой цели.

       Команда ca по сути является однопользовательской командой:
       для разных файлов блокировка не выполняется, и попытки
       выполнить более одной команды ca в одной базе данных могут
       привести к непредсказуемым результатам.

       Опцию copy_extensions следует использовать с осторожностью.
       Если не позаботиться, это может быть угрозой безопасности. Например,
       если запрос сертификата содержит расширение basicConstraints с
       CA:TRUE, а значение copy_extensions установлено на copyall,
       и пользователь не обнаруживает это при отображении сертификата,
       то это вручит запрашивающему действительный сертификат CA.

       Этой ситуации можно избежать, установив copy_extensions для
       копирования и включив basicConstraints с CA:FALSE в файл
       конфигурации. Тогда, если запрос содержит расширение
       basicConstraints, он будет проигнорирован.

       Желательно также включить значения для других расширений,
       таких как keyUsage, чтобы запрос не предоставил свои
       собственные значения.

       Дополнительные ограничения могут быть наложены на сам сертификат CA.
       Например, если сертификат CA имеет:

        basicConstraints = CA:TRUE, pathlen:0

       тогда даже если сертификат выдан с помощью CA:TRUE, он
       не будет действительным.

@item HISTORY
       Поскольку OpenSSL 1.1.1, программа следует RFC5280. В частности,
       срок действия сертификата (указано любым из -startdate,
       -enddate и -days) будет кодироваться как UTCTime, если даты
       предшествуют году 2049 (включительно), и как GeneralizedTime,
       если даты относятся к 2050 году или позже.

@item SEE ALSO
       req(1), spkac(1), x509(1), CA.pl(1), config(5), x509v3_config(5)

@item COPYRIGHT
       Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the OpenSSL license (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.
@end table
1.1.1a                            2018-11-20                             CA(1)
