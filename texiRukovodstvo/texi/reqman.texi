@node req, ASN1PARSE, X509, Top
@chapter req
REQ(1)                              OpenSSL                             REQ(1)
@table @asis
@item NAME
       openssl-req, req - PKCS#10 сертификат запроса и утилита
       генерации сертификата

@item SYNOPSIS
       openssl req [@ref{req -help,, -help}] [@ref{req -inform DER|PEM,, -inform DER|PEM}] [@ref{req -outform DER|PEM,, -outform DER|PEM}] [@ref{req -in filename,, -in filename}] [@ref{req -passin arg,, -passin arg}] [@ref{req -out filename,, -out filename}] [@ref{req -passout arg,, -passout arg}] [@ref{req -text,, -text}] [@ref{req -pubkey,, -pubkey}] [@ref{req -noout,, -noout}] [@ref{req -verify,, -verify}] [@ref{req -modulus,, -modulus}] [@ref{req -new,, -new}] [@ref{req -rand file...,, -rand file...}] [@ref{req [-writerand file],, [-writerand file]}] [@ref{req -newkey arg,, -newkey arg}] [@ref{req rsa:nbits,, -newkey rsa:bits}] [@ref{req -newkey alg:file,, -newkey alg:file}] [@ref{req -pkeyopt opt:value,, -pkeyopt opt:value}] [@ref{req -nodes,, -nodes}] [@ref{req -key filename,, -key filename}] [@ref{req -keyform PEM|DER,, -keyform PEM|DER}] [@ref{req -keyout filename,, -keyout filename}] [@ref{req -keygen_engine id,, -keygen_engine id}] [@ref{req -digest,, -digest}] [@ref{req -config filename,, -config filename}] [@ref{req -multivalue-rdn,, -multivalue-rdn}] [@ref{req -x509,, -x509}] [@ref{req -days n,, -days n}] [@ref{req -set_serial n,, -set_serial n}] [@ref{req -newhdr,, -newhdr}] [@ref{req -addext ext,, -addext ext}] [@ref{req -extensions section,, -extensions section}] [@ref{req -reqexts section,, -reqexts section}] [@ref{req -precert,, -precert}] [@ref{req -utf8,, -utf8}] [@ref{req -nameopt option,, -nameopt option}] [@ref{req -reqopt,, -reqopt}] [@ref{req -subject,, -subject}] [@ref{req -subj arg,, -subj arg}] [@ref{req -batch,, -batch}] [@ref{req -verbose,, -verbose}] [@ref{req -engine id,, -engine id}]

@item DESCRIPTION
       Команда req в первую очередь создает и обрабатывает запросы сертификатов
       в формате PKCS#10. Кроме того, она может создавать самозаверяющие
       сертификаты для использования в качестве например корневых CA.

@item OPTIONS
@table @asis
@item       -help @anchor{req -help}
           Распечатайте сообщение об использовании.

@item       -inform DER|PEM @anchor{req -inform DER|PEM}
           Это определяет формат ввода. Опция DER использует закодированную
           форму ASN1 DER, совместимую с PKCS#10. Форма PEM является форматом
           по умолчанию: она состоит из формата DER base64, закодированного
           с дополнительными строками верхнего и нижнего колонтитула.

@item       -outform DER|PEM @anchor{req -outform DER|PEM}
           Это определяет формат вывода, параметры имеют то же значение и
           значение по умолчанию, что и опция -inform.

@item       -in filename @anchor{req -in filename}
           Здесь указывается имя входного файла для чтения запроса или стандартный
           ввод, если эта опция не указана. Запрос читается только в том случае,
           если не указаны параметры создания (-new и -newkey).

@item       -passin arg @anchor{req -passin arg}
           Источник пароля входного файла. Для получения дополнительной информации
           о формате arg см. Раздел PASS PHRASE ARGUMENTS в openssl (1).

@item       -out filename @anchor{req -out filename}
           Это указывает имя выходного файла для записи или стандартный вывод
           по умолчанию.

@item       -passout arg @anchor{req -passout arg}
           Исходный файл с паролем источника. Для получения дополнительной
           информации о формате arg см. Раздел PASS PHRASE ARGUMENTS в openssl (1).

@item       -text @anchor{req -text}
           Распечатывает запрос сертификата в текстовом виде.

@item       -subject @anchor{req -subject}
           Распечатывает тему запроса (или сертификат subject, если указан -x509)

@item       -pubkey @anchor{req -pubkey}
           Выводит открытый ключ.

@item       -noout @anchor{req -noout}
           Эта опция предотвращает вывод закодированной версии запроса.

@item       -modulus @anchor{req -modulus}
           Эта опция выводит значение модуля открытого ключа, содержащегося в запросе.

@item       -verify @anchor{req -verify}
           Проверяет подпись на запросе.

@item       -new @anchor{req -new}
           Эта опция генерирует новый запрос сертификата. Он запросит
           у пользователя соответствующие значения поля. Фактические
           запрашиваемые поля и их максимальный и минимальный размеры
           указываются в файле конфигурации и любых запрошенных расширениях.

           Если опция -key не используется, она сгенерирует новый закрытый
           ключ RSA, используя информацию, указанную в файле конфигурации.

@item       -rand file... @anchor{req -rand file...}
           Файл или файлы, содержащие случайные данные, используемые для
           заполнения генератора случайных чисел. Можно указать несколько
           файлов, разделенных символом, зависящим от ОС. Разделителем
           является (;) для MS-Windows, (,) для OpenVMS, и (:) для других.

@item       [-writerand file] @anchor{req [-writerand file]}
           Записывает случайные данные в указанный файл при выходе. Это может
           быть использовано с последующим флагом -rand.

@item       -newkey arg @anchor{req -newkey arg}
           Эта опция создает новый запрос сертификата и новый закрытый ключ.
           Аргумент принимает одну из нескольких форм. rsa:nbits @anchor{req rsa:nbits},
           где nbits - это количество битов, генерирует ключ RSA размером nbit. Если
           nbits не указан, т.е. указан -newkey rsa, используется размер ключа
           по умолчанию, указанный в файле конфигурации.

           Все остальные алгоритмы поддерживают форму -newkey alg:file @anchor{req -newkey alg:file}, где
           файл может быть файлом параметров алгоритма, созданным командой
           genpkey -genparam или сертификатом X.509 для ключа с
           соответствующим алгоритмом.

           param:file генерирует ключ, используя файл параметров или файл
           сертификата, алгоритм определяется параметрами. algname:file
           использует алгоритм algname и файл параметров file:, оба алгоритма
           должны совпадать, иначе возникает ошибка. algname просто использует
           алгоритм algname, а параметры, если необходимо, должны быть указаны
           через параметр -pkeyopt.

           dsa:filename генерирует ключ DSA, используя параметры в имени файла
           filenameфайла. ec: filename генерирует ключ EC (может использоваться
           как с алгоритмами ECDSA, так и с ECDH), gost2001:filename генерирует
           ключ GOST R 34.10-2001 (требуется механизм ccgost, настроенный в
           файле конфигурации). Если указан только gost2001, набор параметров
           должен быть указан как -pkeyopt paramset:X

@item       -pkeyopt opt:value @anchor{req -pkeyopt opt:value}
           Установите опцию алгоритма открытого ключа opt в значение. Точный
           набор поддерживаемых параметров зависит от используемого алгоритма
           открытого ключа и его реализации. Смотрите KEY GENERATION OPTIONS
           на странице руководства genpkey для более подробной информации.

@item       -key filename @anchor{req -key filename}
           Это указывает файл для чтения закрытого ключа из. Он также принимает
           закрытые ключи формата PKCS#8 для файлов формата PEM.

@item       -keyform PEM|DER @anchor{req -keyform PEM|DER}
           Формат файла закрытого ключа, указанный в аргументе -key. PEM является
           значением по умолчанию.

@item       -keyout filename @anchor{req -keyout filename}
           Это дает имя файла для записи недавно созданного закрытого ключа.
           Если эта опция не указана, то используется имя файла, присутствующее
           в файле конфигурации.

@item       -nodes @anchor{req -nodes}
           Если указан этот параметр, то при создании закрытого ключа он не
           будет зашифрован.

@item       -digest @anchor{req -digest}
           Здесь указывается дайджест сообщения для подписи запроса. Можно
           использовать любой дайджест, поддерживаемый командой OpenSSL dgst.
           Это переопределяет алгоритм дайджеста, указанный в файле конфигурации.

           Некоторые алгоритмы с открытым ключом могут отменять этот выбор.
           Например, сигнатуры DSA всегда используют сигнатуры SHA1, GOST R 34.10,
           всегда используют GOST R 34.11-94 (-md_gost94), Ed25519 и Ed448,
           никогда не используют дайджест.

@item       -config filename @anchor{req -config filename}
           Это позволяет указать альтернативный файл конфигурации. Optional;
           для описания значения по умолчанию, см. "COMMAND SUMMARY" в openssl.

@item       -subj arg @anchor{req -subj arg}
           Устанавливает имя субъекта для нового запроса или заменяет имя
           субъекта при обработке запроса. Объект arg должен быть
           отформатирован как /type0=value0/type1=value1/type2=.....
           Символы ключевых слов могут быть экранированы / (backslash), и
           пробел сохраняется. Пустые значения разрешены, но соответствующий
           тип не будет включен в запрос.

@item       -multivalue-rdn @anchor{req -multivalue-rdn}
           Эта опция заставляет аргумент -subj интерпретироваться с полной
           поддержкой многозначного RDN. Пример:

           /DC=org/DC=OpenSSL/DC=users/UID=123456+CN=John Doe

           Если -multi-rdn не используется, тогда значением UID является
           123456+CN=John Doe.

@item       -x509 @anchor{req -x509}
           Эта опция выводит самозаверяющий сертификат вместо запроса
           сертификата. Обычно это используется для создания тестового
           сертификата или самозаверяющего корневого объекта CA. Добавленные
           в сертификат расширения (если таковые имеются) указываются в
           файле конфигурации. Если не указано использование опции
           set_serial, для серийного номера будет использоваться
           большое случайное число.

           Если существующий запрос указан с помощью опции -in, он
           преобразуется в самозаверяющий сертификат, в противном случае
           создается новый запрос.

@item       -days n @anchor{req -days n}
           Когда используется опция -x509, это указывает количество дней для
           сертификации сертификата, в противном случае он игнорируется.
           n должно быть положительным целым числом. По умолчанию 30 дней.

@item       -set_serial n @anchor{req -set_serial n}
           Серийный номер для использования при выводе самозаверяющего
           сертификата. Это может быть указано как десятичное значение
           или шестнадцатеричное значение, если ему предшествует 0x.

@item       -addext ext @anchor{req -addext ext}
           Добавьте конкретное расширение к сертификату (если присутствует
           опция -x509) или запрос сертификата. Аргумент должен иметь форму
           пары key=value, как это будет отображаться в файле конфигурации.

           Эта опция может быть дана несколько раз.

@item       -extensions section @anchor{req -extensions section}

@item            -reqexts section @anchor{req -reqexts section}
            
           Эти параметры указывают альтернативный объект sections, который
           включает расширения сертификата (если присутствует параметр -x509)
           или расширения запроса сертификата. Это позволяет использовать
           несколько разных разделов в одном и том же файле конфигурации
           для указания запросов для различных целей.

@item       -precert @anchor{req -precert}
           Расширение будет добавлено к сертификату, что сделает его
           "pre-certificate" (смотри RFC6962). Это может быть отправлено
           в журналы прозрачности сертификата для получения подписанных
           временных отметок сертификата (SCTs). Эти SCTs могут быть затем
           встроены в предварительный сертификат как расширение перед удалением
           и подписанием сертификата.

           Это подразумевает флаг -new.

@item       -utf8 @anchor{req -utf8}
           Эта опция заставляет значения полей интерпретироваться как строки
           UTF8, по умолчанию они интерпретируются как ASCII. Это означает,
           что значения полей, запрашиваемые из терминала или полученные из
           файла конфигурации, должны быть действительными строками UTF8.

@item       -nameopt option @anchor{req -nameopt option}
           Опция, которая определяет, как отображаются имена subject или
           issuer. Аргумент option может быть одним или несколькими параметрами,
           разделенными запятыми. В качестве альтернативы переключатель -nameopt
           может использоваться более одного раза для установки нескольких
           параметров. Смотрите страницу руководства x509 для деталей.

@item       -reqopt @anchor{req -reqopt}
           Настройте формат вывода, используемый с -text. Аргументом опции
           может быть одна опция или несколько опций, разделенных запятыми.

           Смотрите обсуждение параметра -certopt в команде x509.

@item       -newhdr @anchor{req -newhdr}
           Добавляет слово NEW в заголовок файла и строки нижнего колонтитула
           в выводимом запросе. Некоторое программное обеспечение
           (сервер сертификатов Netscape) и некоторое CAs нуждаются
           в этом.

@item       -batch @anchor{req -batch}
           Неинтерактивный режим.

@item       -verbose @anchor{req -verbose}
           Распечатайте дополнительную информацию о выполняемых операциях.

@item       -engine id @anchor{req -engine id}
           Указание механизма (по его уникальной строке идентификатора)
           приведет к тому, что req попытается получить функциональную
           ссылку на указанный механизм, тем самым инициализируя его при
           необходимости. Движок будет установлен по умолчанию для всех
           доступных алгоритмов.

@item       -keygen_engine id @anchor{req -keygen_engine id}
           Определяет механизм (его уникальной строкой идентификатора),
           который будет использоваться для операций генерации ключа.
@end table
@item CONFIGURATION FILE FORMAT
       Параметры конфигурации указаны в разделе req файла конфигурации.
       Как и во всех файлах конфигурации, если в конкретном разделе не
       указано значение (то есть req), то выполняется поиск и в
       исходном безымянном разделе или разделе по умолчанию.

       Доступные варианты подробно описаны ниже.
@table @asis
@item       input_password output_password
           Пароли для входного файла закрытого ключа (если есть) и
           выходного файла закрытого ключа (если он будет создан).
           Параметры командной строки passin и passout переопределяют
           значения файла конфигурации.

@item       default_bits
           Определяет размер ключа по умолчанию в битах.

           Эта опция используется вместе с опцией -new для генерации нового
           ключа. Его можно переопределить, указав явный размер ключа в опции
           -newkey. Наименьший принятый размер ключа составляет 512 бит. Если
           размер ключа не указан, то используется 2048 бит.

@item       default_keyfile
           Это имя файла по умолчанию для записи закрытого ключа. Если не
           указано, ключ записывается в стандартный вывод. Это может быть
           отменено с помощью опции -keyout.

@item       oid_file
           Это указывает на файл, содержащий дополнительные OBJECT IDENTIFIERS.
           Каждая строка файла должна состоять из числовой формы идентификатора
           объекта, за которым следует пробел, затем короткое имя, затем пробел и,
           наконец, длинное имя.

@item       oid_section
           Это указывает на раздел в файле конфигурации, содержащий дополнительные
           идентификаторы объекта. Каждая строка должна состоять из короткого имени
           идентификатора объекта, затем = и числовой формы. Короткие и длинные имена
           одинаковы при использовании этой опции.

@item       RANDFILE
           При запуске указанный файл загружается в генератор случайных чисел, а при
           выходе в него записывается 256 байт. Используется для генерации закрытого ключа.

@item       encrypt_key
           Если для этого параметра установлено значение no, то, если сгенерирован закрытый
           ключ, он не шифруется. Это эквивалентно опции командной строки -nodes. Для
           совместимости encrypt_rsa_key является эквивалентной опцией.

@item       default_md
           Эта опция указывает алгоритм дайджеста для использования. Можно использовать
           любой дайджест, поддерживаемый командой OpenSSL dgst. Эта опция может быть
           переопределена в командной строке. Некоторые алгоритмы подписывания
           (Ed25519 и Ed448) будут игнорировать любой дайджест, который был установлен.

@item       string_mask
           Эта опция маскирует использование определенных типов строк в определенных полях.
           Большинству пользователей не нужно менять эту опцию.

           Он может быть установлен на несколько значений по умолчанию, который также
           является параметром по умолчанию, который использует PrintableStrings, T61Strings
           и BMPStrings, если используется значение pkix, тогда будет использоваться только
           PrintableStrings и BMPStrings. Это следует за рекомендацией PKIX в RFC2459. Если
           используется опция utf8only, то будет использоваться только UTF8Strings: это
           рекомендация PKIX в RFC2459 после 2003 года. Наконец, опция nombstr просто
           использует PrintableStrings и T61Strings: у определенного программного обеспечения
           есть проблемы с BMPStrings и UTF8Strings: в частности, Netscape.

@item       req_extensions
           Здесь указывается раздел файла конфигурации, содержащий список расширений для
           добавления в запрос сертификата. Это может быть отменено переключателем командной
           строки -reqexts. См. Страницу руководства x509v3_config для получения подробной
           информации о формате раздела расширения.

@item       x509_extensions
           Здесь указывается раздел файла конфигурации, содержащий список расширений для
           добавления в сертификат, сгенерированный при использовании переключателя -x509.
           Это может быть отменено переключателем командной строки -extensions.

@item       prompt
           Если установлено значение no, это отключает запрос полей сертификата и просто
           принимает значения из файла конфигурации напрямую. Это также изменяет ожидаемый
           формат разделов отличительного имени и атрибутов.

@item       utf8
           Если установлено значение yes, то значения полей будут интерпретироваться как
           строки UTF8, по умолчанию они интерпретируются как ASCII. Это означает, что
           значения полей, запрашиваемые из терминала или полученные из файла конфигурации,
           должны быть действительными строками UTF8.

@item       attributes
           Это определяет раздел, содержащий любые атрибуты запроса: его формат такой же, как
           у distinguished_name. Обычно они могут содержать типы challengePassword и
           unstructuredName. В настоящее время они игнорируются утилитами подписывания
           запросов OpenSSL, но некоторые CA могут захотеть их.

@item       distinguished_name
           Здесь указывается раздел, содержащий поля различающихся имен, которые необходимо
           запрашивать при создании сертификата или запроса сертификата. Формат описан в
           следующем разделе.
@end table
@item DISTINGUISHED NAME AND ATTRIBUTE SECTION FORMAT
      ФОРМАТ ОТЛИЧИТЕЛЬНОГО ИМЕНИ И АТРИБУТА
@display
       Существует два отдельных формата для разделов с выделенными именами и атрибутами.
       Если опция приглашения установлена ​​в no, то эти разделы просто состоят из имен
       полей и значений: например,

        CN=My Name
        OU=My Organization
        emailAddress=someone@@somewhere.org

       Это позволяет внешним программам (GUI based) сгенерировать файл шаблона со всеми
       именами и значениями полей и просто передать его в req. Пример такого типа файла
       конфигурации содержится в разделе EXAMPLES.

       В качестве альтернативы, если опция подсказки отсутствует или не установлена ​​в no,
       тогда файл содержит информацию о подсказке поля. Он состоит из строк вида:

        fieldName="prompt"
        fieldName_default="default field value"
        fieldName_min= 2
        fieldName_max= 4

       "fieldName" - это используемое имя поля, например, commonName (или CN). Строка
       "prompt" используется, чтобы попросить пользователя ввести соответствующие данные.
       Если пользователь ничего не вводит, то используется значение по умолчанию, если
       значение по умолчанию отсутствует, тогда поле опускается. Поле все еще может быть
       опущено, если присутствует значение по умолчанию, если пользователь просто
       вводит символ '.'.

       Количество вводимых символов должно быть между fieldName_min и fieldName_max limits:
       могут быть дополнительные ограничения в зависимости от используемого поля
       (например, countryName может быть длиной всего два символа и должен
       помещаться в PrintableString).

       Некоторые поля (такие как organizationName) могут использоваться более одного
       раза в DN. Это создает проблему, потому что файлы конфигурации не распознают
       одно и то же имя, встречающееся дважды. Чтобы избежать этой проблемы, если
       fieldName содержит несколько символов, за которыми следует полная остановка,
       они будут игнорироваться. Так, например, второй organizationName можно
       ввести, называя его "1.organizationName".

       Фактически разрешенными именами полей являются любые короткие или длинные
       идентификаторы объектов. Они скомпилированы в OpenSSL и включают обычные
       значения, такие как commonName, countryName, localityName, organizationName,
       organizationalUnitName, stateOrProvinceName. Кроме того, emailAddress включает
       в себя,также имя, фамилию, инициалы givenName и dnQualifier.

       Дополнительные идентификаторы объекта могут быть определены с помощью
       параметров oid_file или oid_section в файле конфигурации. Любые
       дополнительные поля будут обрабатываться так, как если бы они
       были объектами DirectoryString.
@end display
@item EXAMPLES

       Изучите и подтвердите запрос сертификата:
@quotation
        openssl req -in req.pem -text -verify -noout
@end quotation
       Создайте закрытый ключ, а затем сгенерируйте запрос сертификата из него:
@quotation
        openssl genrsa -out key.pem 2048
        openssl req -new -key key.pem -out req.pem
@end quotation
       То же самое, но только с использованием req:
@quotation
        openssl req -newkey rsa:2048 -keyout key.pem -out req.pem
@end quotation
       Создайте самоподписанный корневой сертификат:
@quotation
        openssl req -x509 -newkey rsa:2048 -keyout key.pem -out req.pem
@end quotation
       Пример файла, на который указывает опция oid_file:
@quotation
        1.2.3.4        shortName       A longer Name
        1.2.3.6        otherName       Other longer Name
@end quotation
       Пример раздела, на который указывает oid_section, использующий
       расширение переменной:
@quotation
        testoid1=1.2.3.5
        testoid2=$@{testoid1@}.6
@end quotation
       Пример файла конфигурации, запрашивающий значения полей:
@display
        [ req ]
        default_bits           = 2048
        default_keyfile        = privkey.pem
        distinguished_name     = req_distinguished_name
        attributes             = req_attributes
        req_extensions         = v3_ca

        dirstring_type = nobmp

        [ req_distinguished_name ]
        countryName                    = Country Name (2 letter code)
        countryName_default            = AU
        countryName_min                = 2
        countryName_max                = 2

        localityName                   = Locality Name (eg, city)

        organizationalUnitName         = Organizational Unit Name (eg, section)

        commonName                     = Common Name (eg, YOUR name)
        commonName_max                 = 64

        emailAddress                   = Email Address
        emailAddress_max               = 40

        [ req_attributes ]
        challengePassword              = A challenge password
        challengePassword_min          = 4
        challengePassword_max          = 20

        [ v3_ca ]

        subjectKeyIdentifier=hash
        authorityKeyIdentifier=keyid:always,issuer:always
        basicConstraints = critical, CA:true
@end display
       Пример конфигурации, содержащий все значения полей:
@display
        RANDFILE               = $ENV::HOME/.rnd

        [ req ]
        default_bits           = 2048
        default_keyfile        = keyfile.pem
        distinguished_name     = req_distinguished_name
        attributes             = req_attributes
        prompt                 = no
        output_password        = mypass

        [ req_distinguished_name ]
        C                      = GB
        ST                     = Test State or Province
        L                      = Test Locality
        O                      = Organization Name
        OU                     = Organizational Unit Name
        CN                     = Common Name
        emailAddress           = test@@email.address

        [ req_attributes ]
        challengePassword              = Пароль для вызова
@end display
       Пример предоставления наиболее распространенных атрибутов
       (subject и extensions) в командной строке:
@display
        openssl req -new -subj "/C=GB/CN=foo" \
                         -addext "subjectAltName = DNS:foo.co.uk" \
                         -addext "certificatePolicies = 1.2.3.4" \
                         -newkey rsa:2048 -keyout key.pem -out req.pem
@end display
@item NOTES
@display
       Строки верхнего и нижнего колонтитула в формате PEM обычно:

        -----BEGIN CERTIFICATE REQUEST-----
        -----END CERTIFICATE REQUEST-----

       Некоторое программное обеспечение (некоторые версии сервера сертификатов
       Netscape) вместо этого требует:

        -----BEGIN NEW CERTIFICATE REQUEST-----
        -----END NEW CERTIFICATE REQUEST-----

       который производится с опцией -newhdr, но в остальном совместим. Любая
       форма принимается прозрачно на входе.

       Запросы на сертификат, сгенерированные Xenroll с MSIE, имеют добавленные
       расширения. Он включает в себя расширение keyUsage, которое определяет
       тип ключа (только для подписи или общего назначения) и любой дополнительный
       OIDs, введенный сценарием в расширение extendedKeyUsage.
@end display
@item DIAGNOSTICS

       Следующие сообщения часто спрашивают о:
@quotation
               Using configuration from /some/path/openssl.cnf
               Unable to load config info@*
               (Использование конфигурации из /some/path/openssl.cnf
               Невозможно загрузить информацию о конфигурации)
@end quotation
       Это сопровождается некоторое время спустя...
@quotation
               unable to find 'distinguished_name' in config
               problems making Certificate Request@*
               (не удается найти 'distinguished_name' проблема d
               конфигурации, делающих Certificate Request)
@end quotation
       Первое сообщение об ошибке - ключ: он не может найти файл
       конфигурации! Некоторым операциям (например, проверка запроса
       сертификата) не требуется файл конфигурации, поэтому его использование
       не является обязательным. Однако для создания сертификатов или
       запросов необходим файл конфигурации. Это можно рассматривать
       как ошибку.

       Еще одно загадочное сообщение это:
@display
               Attributes:
                   a0:00
@end display
       это отображается, когда атрибуты отсутствуют, и запрос включает в
       себя правильную пустую структуру SET OF (кодировка DER которой -
       0xa0 0x00). Если вы просто видите:
@display
               Attributes:
@end display
       тогда SET OF отсутствует и кодировка технически недопустима (но это
       допустимо). См. Описание параметра командной строки -asn1-kludge
       для получения дополнительной информации..

@item BUGS

       OpenSSL не работает с T61Strings (он же TeletexStrings): он эффективно
       обрабатывает их, поскольку ISO-8859-1 (Latin 1), Netscape и MSIE ведут
       себя одинаково. Это может вызвать проблемы, если вам нужны символы,
       которых нет в PrintableStrings, и вы не хотите или не можете
       использовать BMPStrings.

       Как следствие обработки T61String, единственный правильный способ
       представления акцентированных символов в OpenSSL - это использование
       BMPString: к сожалению, в настоящее время Netscape подавляет их. Если
       вам нужно использовать акцентированные символы с Netscape и MSIE, вам
       необходимо использовать недействительную форму T61String.

       Текущие побуждения не очень дружелюбны. Это не позволяет вам подтвердить
       то, что вы только что ввели. Другие вещи, такие как расширения в запросах
       сертификатов, статически определены в файле конфигурации. Некоторые из них:
       например, адрес электронной почты в subjectAltName должен быть введен
       пользователем.

@item SEE ALSO
       x509(1), ca(1), genrsa(1), gendsa(1), config(5), x509v3_config(5)

@item COPYRIGHT
       Copyright 2000-2018 The OpenSSL Project Authors. All Rights Reserved.

       Licensed under the OpenSSL license (the "License").  You may not use
       this file except in compliance with the License.  You can obtain a copy
       in the file LICENSE in the source distribution or at
       <https://www.openssl.org/source/license.html>.
@end table
1.1.1a                            2018-11-20                            REQ(1)
